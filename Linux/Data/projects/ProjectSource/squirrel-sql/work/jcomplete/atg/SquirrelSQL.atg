/**
 * Compiler for the SQL language, with semantic actions that support code completion
 *
 * @version $Id: SquirrelSQL.atg,v 1.7 2002/10/13 18:09:12 csell Exp $
 */
PACKAGE "net.sourceforge.jcomplete.parser"
IMPORT "net.sourceforge.jcomplete.completions.*", "net.sourceforge.jcomplete.*"

COMPILER squirrelSQL

    public List statements = new ArrayList();
    public SQLSchema rootSchema;

    private Stack stack;

    protected void addRootStatement(SQLStatement statement)
    {
        statement.setSqlSchema(rootSchema);
        statements.add(statement);
        stack = new Stack();
        stack.push(statement);
    }

    private SQLStatementContext getContext()
    {
        return (SQLStatementContext)stack.peek();
    }

    private void pushContext(SQLStatementContext context)
    {
        SQLStatementContext parent = (SQLStatementContext)stack.peek();
        parent.addContext(context);
        stack.push(context);
    }

    private SQLStatementContext popContext()
    {
        return (SQLStatementContext)stack.pop();
    }

IGNORE CASE

CHARACTERS
    tab         = CHR(9) .
    lf          = CHR(10) .
    cr          = CHR(13) .
    cntl        = CHR(0) .. CHR(31) .
    Special     = '"' + "%&'()*+,-./:;<=>?|".
    Digit       = "0123456789".
    Letter      = CHR(33)..CHR(127) - Special - Digit.
    noquote1    = ANY-'"' - cntl.
    noquote2    = ANY-"'" - cntl.

TOKENS
    ident       = Letter { Letter | Digit }.
    intValue    = Digit { Digit }.
    float       = [ Digit { Digit } ] "." Digit { Digit }.
    SQLString   = '"' {noquote1| "'" } '"' | "'" {noquote2|'"' }"'".
    OpenParens  = "(".


IGNORE CHR(1)..CHR(31)

COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "--" TO cr


PRODUCTIONS

squirrelSQL =
    SQLStatement  { SQLStatement  }
    EOF
    .

SQLStatement            (.  addRootStatement(new SQLStatement(token.pos)); .)
    =
    (SelectStmt | InsertStmt | UpdateStmt | DeleteStmt | CreateStmt | Drop | AlterTable | Transaction)
    [ ";" ]
    .

SelectStmt              (.  pushContext(new SQLStatement(token.pos)); .)
    =
    (SimpleSelect {SetOperator SimpleSelect})
                        (.  popContext(); .)
    .

SetOperator
    = ("UNION" | "EXCEPT" | "INTERSECT" | "MINUS") [ "ALL" ]
    .

UpdateStmt              (.  SQLModifyingStatement statement = new SQLModifyingStatement(t.pos);
                            SQLTable table = new SQLTable(statement, scanner.pos+1);
                            statement.addTable(table);
                            pushContext(statement);
                        .)
    =
    "UPDATE"            (.  table.setName(t.str, t.pos); .)
    Table <null>
                        (.  statement.setUpdateListStart(t.pos+4); .)
    "SET"
    UpdateFieldList     (.  statement.setUpdateListEnd(token.pos); .)
    [WhereClause]       (.  statement.setEndPosition(token.pos);
                            popContext();
                        .)
    .

UpdateFieldList
    =
    UpdateField
    { ItemSeparator UpdateField  }
    .

UpdateField =
    ColumnName "=" Expression
    .

InsertStmt              (.  SQLModifyingStatement statement = new SQLModifyingStatement(t.pos);
                            pushContext(statement);
                        .)
    =
    "INSERT"            (.  SQLTable table = new SQLTable(statement, scanner.pos+1);
                            statement.addTable(table);
                        .)
    "INTO"              (.  SQLColumn column = new SQLColumn(statement, scanner.pos+2);
                            table.setName(t.str, t.pos);
                            column.setRepeatable(true);
                            statement.addColumn(column);
                        .)
    Table <table>
    [ OpenParens
    ColumnList
    CloseParens  ]      (. column.setEndPosition(token.pos); .)
    (("VALUES" OpenParens FieldList CloseParens) | SelectStmt)
                        (.  statement.setEndPosition(token.pos);
                            popContext();
                        .)
    .

DeleteStmt              (.  SQLModifyingStatement statement = new SQLModifyingStatement(t.pos);
                            pushContext(statement);
                        .)
    =
    "DELETE"            (.  SQLTable table = new SQLTable(statement, scanner.pos+1);
                            statement.addTable(table);
                        .)
    "FROM"              (.  table.setName(t.str, t.pos); .)
    Table <table>
    [WhereClause]       (.  statement.setEndPosition(token.pos);
                            popContext();
                        .)
    .

SimpleSelect            (.  SQLSelectStatement statement = new SQLSelectStatement(t.pos);
                            pushContext(statement);
                        .)
    =
    SelectClause
    FromClause
    [WhereClause]
    [GroupByClause] 
    [HavingClause] 
    [OrderByClause]     (.  popContext(); .)
    .

SelectClause            (.  SQLSelectStatement statement = (SQLSelectStatement)getContext();
                            statement.setSelectListStart(scanner.pos);
                        .)
    =
    SYNC "SELECT"
    ["DISTINCT" | "ALL"]
    SelectFieldList     (.  statement.setSelectListEnd(t.pos); .)
    .

FromClause              (.  SQLSelectStatement statement = (SQLSelectStatement)getContext();
                            statement.setFromStart(scanner.pos);
                        .)
    =
    SYNC "FROM"
    FromTableList       (.  statement.setFromEnd(t.pos); .)
    .
        
FromTableList =
    QualifiedTable {(ItemSeparator QualifiedTable) | JoinStmt}
    .
        
QualifiedTable          (.  SQLSelectStatement statement = (SQLSelectStatement)getContext();
                            SQLTable table = new SQLTable(statement, t.pos);
                            statement.addTable(table);
                            boolean wasSet = false;
                        .)
    =
    ident               (.  if(t.val.equals("."))
                                table.setSchema(token.str, token.pos);
                            else
                                table.setName(token.str, token.pos);
                        .)
    [ "." ident         (.  table.setName(token.str, token.pos); .)
    ] 
    [
    ["AS"]              (.  table.setAlias(t.str, t.pos);
                            wasSet = true;
                            if(statement.setTable(table) == false)
                                SemError(10);
                        .)
    Alias
    ]                   (.  if(!wasSet && statement.setTable(table) == false)
                                SemError(10);
                        .)
    .

JoinStmt =
    (CrossJoin | ([JoinType] "JOIN" QualifiedTable [JoinExpr]))
    .

CrossJoin =
    "CROSS" "JOIN" QualifiedTable
    .

JoinType =
    ["NATURAL"] ("INNER" | (("FULL" | "LEFT" | "RIGHT") ["OUTER"]))
    .

JoinExpr =
    ("ON" Expression)
    | ("USING" OpenParens ColumnList CloseParens)
    .

WhereClause             (.  SQLStatement statement = (SQLStatement)getContext();
                            SQLWhere where = new SQLWhere(statement, t.pos);
                            pushContext(where);
                        .)
    =
    SYNC "WHERE" SearchCondition
                        (.  where.setEndPosition(t.pos);
                            popContext();
                        .)
    .

GroupByClause           (.  SQLSelectStatement statement = (SQLSelectStatement)getContext();
                            statement.setGroupByStart(scanner.pos);
                        .)
    =
    SYNC "GROUP" "BY" FieldList
                        (.  statement.setGroupByEnd(t.pos); .)
    .

HavingClause            (.  SQLSelectStatement statement = (SQLSelectStatement)getContext();
                            statement.setHavingStart(scanner.pos);
                        .)
    =
    SYNC "HAVING" SearchCondition
                        (.  statement.setHavingEnd(t.pos); .)
    .

OrderByClause           (.  SQLSelectStatement statement = (SQLSelectStatement)getContext();
                            statement.setOrderByStart(scanner.pos);
                        .)
    =
    SYNC "ORDER" "BY" OrderByFldList
                        (.  statement.setOrderByEnd(t.pos); .)
    .

SelectFieldList
    =
    SelectField {ItemSeparator SelectField}
    .

SelectField =
    (Expression ["AS" Alias])
    | "*"
    .

FunctionExpr =
    ("TIMESTAMP" | "UPPER" | "MONTH" | "YEAR")
    OpenParens Expression  { ItemSeparator Expression  } 
    CloseParens
    .
        
ColumnFunction =
    ( "COUNT" | "SUM" | "MAX" | "MIN" | "AVG"  ) 
    OpenParens  
    ("*" | (["DISTINCT"] Expression))
    CloseParens
    .

ColumnList =
    ColumnName {ItemSeparator ColumnName}
    .

ColumnName              (.  SQLStatementContext context = getContext();
                            SQLColumn column = new SQLColumn(context, t.pos);
                            context.addColumn(column);
                            if(scanner.ch == '.')
                                column.setQualifier(t.str, t.pos);
                            else
                                column.setColumn(t.str, t.pos);
                        .)
    =
    ident
    [ "."
    (ident              (.  column.setColumn(token.str, token.pos); .)
    | "*"
    )]
    .

SimpleColumnName =
    ident
    .

SimpleColumnList =
    SimpleColumnName  {ItemSeparator SimpleColumnName }
    .

SimpleColumnParam =
    OpenParens SimpleColumnList CloseParens
    .

FieldList =
    Field  { ItemSeparator Field  }
    .

Field =
    ColumnName
    | "NULL"
    | float
    | intValue
    | SQLString
    | Param
    .

Table <SQLTable table>  (.  if(table != null)
                                table.setName(t.str, t.pos);
                        .)
    =
    ident
    .

Alias = 
    ident
    .

OrderByFldList =
    OrderByField  {(ItemSeparator OrderByField)}
    .

OrderByField =
    (ColumnName | intValue)
    [("DESC" | "ASC")]
    .

SearchCondition =
    Expression
    .

Expression =
    SimpleExpression  {Relation SimpleExpression}
    .

SimpleExpression =
    [NotOperator] 
    Term  
    {Operator [NotOperator] Term}
    .

Term =
    ["-"] 
    (
    (Field [TestExpr])
    | 
    ColumnFunction 
    | 
    FunctionExpr 
    | 
    (OpenParens (Expression | SelectStmt) CloseParens)
    )
    .

Param =
    ":" ident
    .

NotOperator =
    "NOT"
    .

Operator =
    MathOperator        
    | WordOperator
    .

MathOperator =
    ( "*" | "/" | "+" | "-"  ) 
    .

WordOperator =
    ("AND" | "OR") 
    .
    
LikeTest =
    "LIKE" (SQLString | Param) ["ESCAPE" SQLString]
    .
    
NullTest =
    "IS" [NotOperator] "NULL"
    .

Relation =
    ( "=" | "<>" | "<" | "<=" | ">" | ">="  ) 
    .

TestExpr =
    NullTest        
    | [NotOperator] (InSetExpr | BetweenExpr | LikeTest)
    .

BetweenExpr =
    "BETWEEN" Field "AND" Field
    .

InSetExpr =
    "IN" OpenParens (FieldList | SelectStmt) CloseParens
    .

Transaction =
    ("COMMIT" | "ROLLBACK") ["WORK"]
    .

len =
    intValue
    .

lenParam =
    OpenParens len CloseParens
    .

precision =
    intValue ItemSeparator intValue
    .

DataType =
    (("CHAR" | "CHARACTER")  lenParam)        
    | 
    ("VARCHAR" lenParam)        
    |
    ("INTEGER" | "INT") 
    | 
    "SMALLINT"
    | 
    ("NUMERIC" OpenParens precision CloseParens  )        
    | 
    "DATE"
    | 
    ("TIME" lenParam)        
    | 
    ("TIMESTAMP" lenParam)
    .

ColumnDefault =
    "DEFAULT"
    (SQLString | intValue  | float)
    .

ColumnDefList =
    ColumnDef  {ItemSeparator ColumnDef}
    .

ColumnDef =
    SimpleColumnName DataType {ColumnDefault | (NotOperator "NULL")}
    .

PrimaryKey =
    "PRIMARY"
    "KEY"
    SimpleColumnParam
    .

RelationName =
    ident
    .

ConstraintName =
    ident
    .
    
ForeignKey
    =
    "FOREIGN" "KEY"
    RelationName SimpleColumnParam
    "REFERENCES"
    Table <null>
    ["MATCH" ("FULL" | "PARTIAL")]
    {"ON" ("DELETE" | "UPDATE") 
        ("CASCADE" | ("SET" ("NULL" | "DEFAULT")))
        |  
        ("NO" "ACTION") 
    }
    .
Unique =
    "UNIQUE"
    SimpleColumnParam
    .
    
CheckConstraint =
    "CHECK"
    OpenParens Expression CloseParens
    .

CreatePart =
    ColumnDef | PrimaryKey | ForeignKey | Unique | CheckConstraint
    .

CreateStmt =
    "CREATE" (CreateTable | CreateIndex)
    .

CreateTable
    =
    "TABLE"
    Table <null>
    OpenParens
    CreatePart {ItemSeparator CreatePart} CloseParens
    .

CascadeRestrict =
    ("CASCADE" | "RESTRICT") 
    .

Drop =
    "DROP" (DropTable | IndexAndName)
    .

DropTable =
    "TABLE" QualifiedTable  [CascadeRestrict]
    .

Add =
    "ADD" ( 
        ColumnDefList 
        | PrimaryKey 
        | ForeignKey 
        | Unique 
        | CheckConstraint)
    .

Alter =
    "ALTER"
    SimpleColumnName (("DROP" "DEFAULT") |  ("SET" ColumnDefault))
    .
    
DropPart =
    "DROP" (
        (SimpleColumnName CascadeRestrict) 
        | ("PRIMARY" "KEY") 
        | ("FOREIGN" "KEY" RelationName) 
        | ("CONSTRAINT" ConstraintName CascadeRestrict))
    .

AlterTable =
    "ALTER" "TABLE" QualifiedTable (Add | Alter | DropPart)
    .

IndexColumn =
    SimpleColumnName [("ASC" | "DESC")]
    .

IndexColumnList =
    IndexColumn {ItemSeparator IndexColumn}
    .

IndexName =
    ident
    .

CreateIndex
    =
    ["UNIQUE"] IndexAndName
    "ON"
    Table <null>
    OpenParens IndexColumnList CloseParens
    .

IndexAndName =
    "INDEX" IndexName
    .

ItemSeparator =
    WEAK ","
    .

CloseParens =
        WEAK ")"
        .

END squirrelSQL.
