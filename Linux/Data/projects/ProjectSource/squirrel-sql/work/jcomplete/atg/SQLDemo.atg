$C
COMPILER SQLDemo

DELPHI
GLOBAL
  // Modified version of Mike Reith SQL Parser
TARGETDIRECTORY
  C:\Dev\Delphi6\Projects\Col\SQLParsers
COMPILERFRAME
  C:\Dev\parserbuilder\Frames\pbCompiler.frm
PARSERFRAME
  C:\Dev\parserbuilder\Frames\pbParser.frm
SCANNERFRAME
  C:\Dev\parserbuilder\Frames\pbScanner.frm
PRIVATE
fOutputStream : TMemoryStream;
   fSubSelectDepth : integer;
   fInNaturalJoin : boolean;
   FExpectOverride : Boolean;
            
  fCollectStart : Integer;
  fCollectLength : Integer;
   procedure Init;
 function CopySourceToCurrent : String;
   procedure Final;
   Function CalcLength : Integer;
   procedure SetStart;
    procedure WriteStr(S : string);
    procedure WriteClause(S : string);
    procedure WriteKeyword;
    procedure WriteSymbol;
    procedure WriteType(S : string);
    procedure WriteRelation;
    Function GetLexString : String;
    Function GetLookaheadString : String;
    Function GetLookAheadName: String;
    property OutputStream : TMemoryStream read fOutputStream write fOutputStream;
    property SubSelectDepth : integer read fSubSelectDepth write fSubSelectDepth;
    property InNaturalJoin : boolean read fInNaturalJoin write fInNaturalJoin;
PROTECTED

PUBLIC

CREATE
fOutputStream := TMemoryStream.Create;
DESTROY
fOutputStream.Free;
ERRORS
200 : s := s + 'Unexpected end of command' ;
    201 : s := s +  '"ON" or "USING" clause may not be used with "NATURAL"' ;
    202 : s := s +  '"UNION JOIN" not supported' ;
    203 : s := s +  '"NULL" keyword cannot be used here - use "IS" or "IS NOT"' ;
PUBLISHED

END_DELPHI

const
  PadLen = 20;


                        
function PadR(S : string; Ch : char; L : integer) : string;
var
  i : integer;
begin
  for i := 1 to L - (Length(s)) do
    s := s + Ch;
  Result := s;
end;

function PadL(const S : string; Ch : char; const Len : Integer): string;
var
	N: Integer;
begin

	N := Length (S);
	if N < Len then
		Result := StringOfChar(ch,Len - N) + S
	else
		Result := S;
end;


Procedure T-->GrammarParser.SetStart;
Begin
 fCollectStart := nextPos+1;
End;

Function T-->GrammarParser.CopySourceToCurrent : String;
Begin
 CalcLength;
 Result := Copy(src.DataString, FCollectStart, fCollectLength);
End;

Function T-->GrammarParser.CalcLength : Integer;
Begin
 Result := nextPos - fCollectStart+1;
 fCollectLength := Result;
End;

procedure T-->GrammarParser.Init;
begin
  FExpectOverride := False;
  OutputStream.Clear;
  lst.Size := 0;
 fOutputStream.Size := 0;
 fCollectStart := 0;
 fCollectLength := 0;
  SubSelectDepth := 0;
end;

procedure T-->GrammarParser.Final;
begin
  OutputStream.Position := 0;
  OutputStream.SaveToStream(lst);
  OutputStream.Clear;
end;

procedure T-->GrammarParser.WriteStr(S : string);
begin                               
  S := S + #13#10;
  OutputStream.WriteBuffer(S[1],length(S));
end;                                  

procedure T-->GrammarParser.WriteClause(S : string);
var
  s1 : string;
begin        
  S := ' ' + S + ' ' ;
  S1 := PadL(S,'-' ,PadLen - SubSelectDepth + length(S) - 1);
  WriteStr(PadL(s1,'>' ,SubSelectDepth + length(S1)));
end;                        

procedure T-->GrammarParser.WriteKeyword;
begin
  WriteStr(PadR(PadL('Keyword:' ,'>' ,SubSelectDepth + 8),' ' ,PadLen) + GetLexString);
end;
    
procedure T-->GrammarParser.WriteSymbol;
begin
  WriteStr(PadR(PadL('Symbol:' ,'>' ,SubSelectDepth + 7),' ' ,PadLen) + GetLexString);
end;
    
procedure T-->GrammarParser.WriteRelation;
begin
  WriteStr(PadR(PadL('Comparison:' ,'>' ,SubSelectDepth + 11),' ' ,PadLen) + GetLexString);
end;
    
procedure T-->GrammarParser.WriteType(S : string);
begin
  WriteStr(PadR(PadL(S,'>' ,SubSelectDepth + length(s)),' ' ,PadLen) + GetLexString);
end;

Function T-->GrammarParser.GetLexString : String;
begin
   GetString(pos, len, Result)
end;

function T-->GrammarParser.GetLookaheadString: String;
begin
  LookaheadString(Result);
end;

function T-->GrammarParser.GetLookAheadName: String;
begin
  LookAheadName(Result);
end;

(* End of Arbitrary Code *)


IGNORE CASE

CHARACTERS
eol     = CHR(13).
Special = '"' + "%&'()*+,-./:;<=>?|".
Digit   = "0123456789".
Letter  = CHR(33)..CHR(255) - Special - Digit.
noquote1=ANY-'"' -CHR(1)..CHR(31).
noquote2=ANY-"'" -CHR(1)..CHR(31).

TOKENS
ident = Letter { Letter | Digit }.
integer_ = Digit { Digit }.
float = [ Digit { Digit } ] "." Digit { Digit }.
SQLString = '"' {noquote1| "'" } '"' | "'" {noquote2|'"' }"'".

NAMES

IGNORE CHR(1)..CHR(31)
PRAGMAS

COMMENTS FROM "/*" TO "*/" NESTED

PRODUCTIONS
SQLDemo =
        (. Init ; .)
        
         { ANY  } 
        SQLStatement  { ANY | SQLStatement  } 
        EOF                                         (. Final ; .)
        .
SQLStatement =
        ( SelectSQL | UpdateSQL | InsertSQL | DeleteSQL | Transaction 
        | CreateExpr | Drop | AlterTable | EXECStmt  ) 
        WEAK ";"                                         (. WriteSymbol ; .)
        .
SelectSQL =
        ( SelectStmt  { "UNION"                                         (. if GetLookaheadName = 'JOIN' then 
                                                    SynError(202) 
                                                    else
                                                   WriteClause( 'Union Clause' ) ; .)
        
         [ "ALL"                                         (. WriteKeyword ; .)
         ] 
        
        SelectStmt  } )
        .
SubSelectSQL =
        (. SubSelectDepth := SubSelectDepth + 1 ; .)
        
        SelectSQL                                         (. SubSelectDepth := SubSelectDepth - 1 ; .)
        .
UpdateSQL =
        (. WriteClause( 'Update Clause' ) ; .)
        
        UpdateStmt
        .
InsertSQL =
        (. WriteClause( 'Insert Clause' ) ; .)
        
        InsertStmt
        .
DeleteSQL =
        (. WriteClause( 'Delete Clause' ) ; .)
        
        DeleteStmt
        .
UpdateStmt =
        "UPDATE"                                         (. WriteKeyword ; .)
        
        Table "SET"                                         (. WriteKeyword ; .)
        
        UpdateFieldList  [ WhereClause  ]
        .
UpdateField =
        ColumnName "="                                         (. WriteSymbol ; .)
        
        Expression
        .
UpdateFieldList =
        UpdateField  { ItemSeparator UpdateField  }
        .
InsertStmt =
        "INSERT"                                         (. WriteKeyword ; .)
        
        "INTO"                                         (. WriteKeyword ; .)
        
        Table  [ OpenParens ColumnList CloseParens  ] 
         (  ( "VALUES"                                         (. WriteKeyword ; .)
        
        OpenParens FieldList CloseParens  ) 
        | SelectSQL  )
        .
DeleteStmt =
        "DELETE"                                         (. WriteKeyword ; .)
        
        "FROM"                                         (. WriteKeyword ; .)
        
        Table  [ WhereClause  ]
        .
EXECStmt =
        "EXEC"
        .
SelectStmt =
        (. WriteClause( 'Select Clause' ) ; .)
        
         ( SelectClause  [ FromClause  ] 
         [ WhereClause  ] 
         [ GroupByClause  ] 
         [ HavingClause  ] 
         [ OrderByClause  ] )
        .
SelectClause =
        "SELECT"                                         (. WriteKeyword ; .)
        
         [ "DISTINCT"                                         (. WriteKeyword ; .)
        
        | "ALL"                                         (. WriteKeyword ; .)
         ] 
        
        SelectFieldList
        .
FromClause =
        SYNC "FROM"                                         (. WriteClause( 'From Clause' ) ;
                                                    WriteKeyword ; .)
        
        FromTableList
        .
FromTableList =
        QualifiedTable  {  ( ItemSeparator QualifiedTable  ) 
        | JoinStmt  }
        .
QualifiedTable =
        ident                                         (. if GetLookaheadString = '.' then 
                                                    WriteType( 'Table Qualifier:' ) 
                                                    else
                                                   WriteType( 'From Table:' ) ; .)
        
         [ "." ident                                         (. WriteType( 'From Table:' ) ; .)
         ] 
        
         [  [ "AS"                                         (. WriteKeyword ; .)
         ] 
        
        Alias                                         (. WriteType( 'Table Alias:' ) ; .)
         ]
        .
JoinStmt =
        (. InNaturalJoin := false ; .)
        
         ( CrossJoin |  (  [ JoinType  ] 
        "JOIN"                                         (. WriteKeyword ; .)
        
        QualifiedTable  [                              (. if InNaturalJoin then 
                                                    SynError(201) ; .)
        
        JoinExpr  ] ) )
        .
CrossJoin =
        "CROSS"                                         (. WriteKeyword ; .)
        
        "JOIN"                                         (. WriteKeyword ; .)
        
        QualifiedTable
        .
JoinType =
        [ "NATURAL"                                         (. WriteKeyword ;
                                                    InNaturalJoin := true ; .)
         ] 
        
         ( "INNER"                                         (. WriteKeyword ; .)
        
        |  (  ( "FULL" | "LEFT" | "RIGHT"  ) 
                                                (. WriteKeyword ; .)
        
         [ "OUTER"                                         (. WriteKeyword ; .)
         ] ) )
        .
JoinExpr =
        ( "ON"                                         (. WriteKeyword ; .)
        
        Expression  )        | 
        ( "USING"                                         (. WriteKeyword ; .)
        
        OpenParens ColumnList CloseParens  )
        .
WhereClause =
        SYNC "WHERE"                                         (. WriteClause( 'Where Clause' ) ;
                                                    WriteKeyword ; .)
        
        SearchCondition
        .
HavingClause =
        SYNC "HAVING"                                         (. WriteClause( 'Having Clause' ) ;
                                                    WriteKeyword ; .)
        
        SearchCondition
        .
OrderByClause =
        SYNC "ORDER"                                         (. WriteClause( 'Order By Clause' ) ;
                                                    WriteKeyword ; .)
        
        "BY"                                         (. WriteKeyword ; .)
        
        OrderByFldList
        .
GroupByClause =
        SYNC "GROUP"                                         (. WriteClause( 'Group By Clause' ) ;
                                                    WriteKeyword ; .)
        
        "BY"                                         (. WriteKeyword ; .)
        
        FieldList
        .
SelectFieldList =
        SelectField  { ItemSeparator SelectField  }
        .
SelectField =
        ( Expression  [ "AS"                                         (. WriteKeyword ; .)
        
        Alias                                         (. WriteType( 'Field Alias:' ) ; .)
         ] )        | 
        "*"                                         (. WriteType( 'All Columns:' ) ; .)
        .
FunctionExpr =
        ( "TIMESTAMP" | "UPPER" | "MONTH" | "YEAR"  ) 
                                                (. WriteType( 'Function' ) ; .)
        
        OpenParens Expression  { ItemSeparator Expression  } 
        CloseParens
        .
ColumnFunction =
        ( "COUNT" | "SUM" | "MAX" | "MIN" | "AVG"  ) 
                                                (. WriteType( 'Column Function:' ) ; .)
        
        OpenParens  ( "*"                                         (. WriteType( 'All Columns:' ) ; .)
        
        |  (  [ "DISTINCT"                                         (. WriteKeyword ; .)
         ] 
        
        Expression  ) ) 
        CloseParens
        .
ColumnList =
        ColumnName  { ItemSeparator ColumnName  }
        .
ColumnName =
        ident                                         (. if GetLookaheadString = '.' then 
                                                    WriteType( 'Table Alias:' ) 
                                                    else
                                                   WriteType( 'Column Name:' ) ; .)
        
         [ "."                                         (. WriteSymbol ; .)
        
         ( ident                                         (. WriteType( 'Column Name:' ) ; .)
        
        | "*"                                         (. WriteType( 'All Columns:' ) ; .)
         ) ]
        .
SimpleColumnName =
        ident                                         (. WriteType( 'Column Name:' ) ; .)
        .
SimpleColumnList =
        SimpleColumnName  { ItemSeparator SimpleColumnName  }
        .
SimpleColumnParam =
        OpenParens SimpleColumnList CloseParens
        .
FieldList =
        Field  { ItemSeparator Field  }
        .
Field =
        ColumnName        | 
        Null        | 
        float                                         (. WriteType( 'Float:' ) ; .)        | 
        integer_                                         (. WriteType( 'Integer:' ) ; .)        | 
        SQLString                                         (. WriteType( 'String:' ) ; .)        | 
        Param
        .
Null =
        "NULL"                                         (. WriteType( 'NULL:' ) ; .)
        .
Table =
        ident                                         (. WriteType( 'Table:' ) ; .)
        .
Alias =
        ident
        .
OrderByFldList =
        OrderByField  {  ( ItemSeparator OrderByField  ) }
        .
OrderByField =
        ( ColumnName | integer_                                         (. WriteType( 'Field Idx:' ) ; .)
         ) 
        
         [  ( "DESC"                                         (. WriteKeyword ; .)
        
        | "ASC"                                         (. WriteKeyword ; .)
         ) ]
        .
SearchCondition =
        Expression
        .
Expression =
        SimpleExpression  { Relation SimpleExpression  }
        .
SimpleExpression =
        [ NotOperator  ] 
        Term  { Operator  [ NotOperator  ] 
        Term  }
        .
Term =
        [ "-"                                         (. WriteSymbol ; .)
         ] 
        
         (  ( Field  [ TestExpr  ] ) 
        | ColumnFunction | FunctionExpr 
        |  ( OpenParens  ( Expression | SubSelectSQL  ) 
        CloseParens  ) )
        .
Param =
        ":"                                         (. WriteSymbol ; .)
        
        ident                                         (. WriteType( 'Param:' ) ; .)
        .
NotOperator =
        "NOT"                                         (. WriteKeyword ; .)
        .
Operator =
        MathOperator        | 
        WordOperator
        .
MathOperator =
        ( "*" | "/" | "+" | "-"  ) 
                                                (. WriteSymbol ; .)
        .
WordOperator =
        ( "AND" | "OR"  ) 
                                                (. WriteKeyword ; .)
        .
LikeTest =
        "LIKE"                                         (. WriteKeyword ; .)
        
         ( SQLString                                         (. WriteType( 'String:' ) ; .)
        
        | Param  ) 
         [ "ESCAPE"                                         (. WriteKeyword ; .)
        
        SQLString                                         (. WriteType( 'String:' ) ; .)
         ]
        .
NullTest =
        "IS"                                         (. WriteKeyword ; .)
        
         [ NotOperator  ] 
        Null
        .
Relation =
        ( "=" | "<>" | "<" | "<=" | ">" | ">="  ) 
                                                (. WriteRelation ;
                                                    if GetLookaheadName = 'NULL' then 
                                                    SynError(203) ; .)
        .
TestExpr =
        NullTest        | 
        [ NotOperator  ] 
         ( InSetExpr | BetweenExpr | LikeTest  )
        .
BetweenExpr =
        "BETWEEN"                                         (. WriteKeyword ; .)
        
        Field "AND"                                         (. WriteKeyword ; .)
        
        Field
        .
InSetExpr =
        "IN"                                         (. WriteKeyword ; .)
        
        OpenParens  ( FieldList | SubSelectSQL  ) 
        CloseParens
        .
Transaction =
        ( 'COMMIT' | 'ROLLBACK'  ) 
                                                (. WriteType( 'Transaction:' ) ; .)
        
         [ 'WORK'                                         (. WriteKeyword ; .)
         ]
        .
len =
        integer_                                         (. WriteType( 'Length:' ) ; .)
        .
lenParam =
        OpenParens len CloseParens
        .
precision =
        integer_                                         (. WriteType( 'Precision:' ) ; .)
        
        ItemSeparator integer_                                         (. WriteType( 'Scale:' ) ; .)
        .
DataType =
        (  ( "CHAR" | "CHARACTER"  ) 
                                                (. WriteType( 'Data Type:' ) ; .)
        
        lenParam  )        | 
        ( "VARCHAR"                                         (. WriteType( 'Data Type:' ) ; .)
        
        lenParam  )        | 
        ( "INTEGER" | "INT"  ) 
                                                (. WriteType( 'Data Type:' ) ; .)        | 
        "SMALLINT"                                         (. WriteType( 'Data Type:' ) ; .)        | 
        ( "NUMERIC"                                         (. WriteType( 'Data Type:' ) ; .)
        
        OpenParens precision CloseParens  )        | 
        "DATE"                                         (. WriteType( 'Data Type:' ) ; .)        | 
        ( "TIME"                                         (. WriteType( 'Data Type:' ) ; .)
        
        lenParam  )        | 
        ( "TIMESTAMP"                                         (. WriteType( 'Data Type:' ) ; .)
        
        lenParam  )
        .
ColumnDefault =
        "DEFAULT"                                         (. WriteKeyword ; .)
        
         ( SQLString                                         (. WriteType( 'String:' ) ; .)
        
        | integer_                                         (. WriteType( 'Integer:' ) ; .)
        
        | float                                         (. WriteType( 'Float:' ) ; .)
         )
        .
ColumnDefList =
        ColumnDef  { ItemSeparator ColumnDef  }
        .
ColumnDef =
        SimpleColumnName DataType  { ColumnDefault |  ( NotOperator Null  ) }
        .
PrimaryKey =
        "PRIMARY"                                         (. WriteType( 'Primary Key:' ) ; .)
        
        "KEY"                                         (. WriteKeyword ; .)
        
        SimpleColumnParam
        .
RelationName =
        ident                                         (. WriteType( 'Relation Name:' ) ; .)
        .
ConstraintName =
        ident                                         (. WriteType( 'Constraint Name:' ) ; .)
        .
ForeignKey =
        "FOREIGN"                                         (. WriteType( 'Foreign Key:' ) ; .)
        
        "KEY"                                         (. WriteKeyword ; .)
        
        RelationName SimpleColumnParam "REFERENCES"                                         (. WriteKeyword ; .)
        
        Table  [ "MATCH"                                         (. WriteKeyword ; .)
        
         ( "FULL" | "PARTIAL"  ) 
                                                (. WriteType( 'Match Type:' ) ; .)
         ] 
        
         { "ON"                                         (. WriteKeyword ; .)
        
         ( "DELETE" | "UPDATE"  ) 
                                                (. WriteKeyword ; .)
        
         ( "CASCADE"                                         (. WriteKeyword ; .)
        
        |  ( "SET"                                         (. WriteKeyword ; .)
        
         ( Null | "DEFAULT"  ) 
                                                (. WriteKeyword ; .)
         ) ) 
        
        |  ( "NO"                                         (. WriteKeyword ; .)
        
        "ACTION"                                         (. WriteKeyword ; .)
         ) }
        .
Unique =
        "UNIQUE"                                         (. WriteKeyword ; .)
        
        SimpleColumnParam
        .
CheckConstraint =
        "CHECK"                                         (. WriteKeyword ; .)
        
        OpenParens Expression CloseParens
        .
CreatePart =
        ColumnDef        | 
        PrimaryKey        | 
        ForeignKey        | 
        Unique        | 
        CheckConstraint
        .
CreateExpr =
        "CREATE"                                         (. WriteKeyword ; .)
        
         ( CreateTable | CreateIndex  )
        .
CreateTable =
        "TABLE"                                         (. WriteKeyword ; .)
        
        Table OpenParens CreatePart  { ItemSeparator CreatePart  } 
        CloseParens
        .
CascadeRestrict =
        ( "CASCADE" | "RESTRICT"  ) 
                                                (. WriteKeyword ; .)
        .
Drop =
        "DROP"                                         (. WriteKeyword ; .)
        
         ( DropTable | IndexAndName  )
        .
DropTable =
        "TABLE"                                         (. WriteKeyword ; .)
        
        QualifiedTable  [ CascadeRestrict  ]
        .
Add =
        "ADD"                                         (. WriteKeyword ; .)
        
         ( ColumnDefList | PrimaryKey | ForeignKey | Unique 
        | CheckConstraint  )
        .
Alter =
        "ALTER"                                         (. WriteKeyword ; .)
        
        SimpleColumnName  (  ( "DROP"                                         (. WriteKeyword ; .)
        
        "DEFAULT"                                         (. WriteKeyword ; .)
         ) 
        
        |  ( "SET"                                         (. WriteKeyword ; .)
        
        ColumnDefault  ) )
        .
DropPart =
        "DROP"                                         (. WriteKeyword ; .)
        
         (  ( SimpleColumnName CascadeRestrict  ) 
        |  ( "PRIMARY"                                         (. WriteKeyword ; .)
        
        "KEY"                                         (. WriteKeyword ; .)
         ) 
        
        |  ( "FOREIGN"                                         (. WriteKeyword ; .)
        
        "KEY"                                         (. WriteKeyword ; .)
        
        RelationName  ) 
        |  ( "CONSTRAINT"                                         (. WriteKeyword ; .)
        
        ConstraintName CascadeRestrict  ) )
        .
AlterTable =
        "ALTER"                                         (. WriteKeyword ; .)
        
        "TABLE"                                         (. WriteKeyword ; .)
        
        QualifiedTable  ( Add | Alter | DropPart  )
        .
IndexColumn =
        SimpleColumnName  [  ( "ASC" | "DESC"  ) 
                                                (. WriteKeyword ; .)
         ]
        .
IndexColumnList =
        IndexColumn  { ItemSeparator IndexColumn  }
        .
IndexName =
        ident                                         (. WriteType( 'Index Name:' ) ; .)
        .
CreateIndex =
        [ "UNIQUE"                                         (. WriteKeyword ; .)
         ] 
        
        IndexAndName "ON"                                         (. WriteKeyword ; .)
        
        Table OpenParens IndexColumnList CloseParens
        .
IndexAndName =
        "INDEX"                                         (. WriteKeyword ; .)
        
        IndexName
        .
ItemSeparator =
        WEAK ","                                         (. WriteSymbol ; .)
        .
OpenParens =
        "("                                         (. WriteSymbol ; .)
        .
CloseParens =
        WEAK ")"                                         (. WriteSymbol ; .)
        .

END SQLDemo.
