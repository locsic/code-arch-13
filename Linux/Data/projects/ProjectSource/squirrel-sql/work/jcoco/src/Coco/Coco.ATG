/* $0124678 */ /* $1268 */
/* Coco/R
   This grammar produces LL1 warnings for Attribs and AttrDecl, which can be ignored.
*/
COMPILER Coco

	private static final int ident = 0;
	private static final int string = 1;

	private static boolean genScanner = true, ignoreCase = false, genNames = false;
	private static boolean startedDFA = false;

	private static void MatchLiteral(int sp) {
	// store string either as token or as literal
		Symbol sym = Tab.Sym(sp);
		int matchedSp = DFA.MatchedDFA(sym.name, sp);
		if (matchedSp == Tab.noSym) sym.struct = Tab.classToken;
		else {
			Symbol sym1 = Tab.Sym(matchedSp); sym1.struct = Tab.classLitToken;
			sym.struct = Tab.litToken;
		}
	}

	private static void SetCtx(int p) {
	// set transition code to contextTrans
		while (p > 0) {
			GraphNode n = Tab.Node(p);
			if (n.typ == Tab.chr || n.typ == Tab.clas) {
				n.p2 = Tab.contextTrans;
			} else if (n.typ == Tab.opt || n.typ == Tab.iter) {
				SetCtx(n.p1);
			} else if (n.typ == Tab.alt) {
				SetCtx(n.p1); SetCtx(n.p2);
			}
			p = n.next;
		}
	}

	private static String FixString(String s) {
		if (ignoreCase) s = s.toUpperCase();
		char[] a = s.toCharArray();
		int len = a.length;
		if (len == 2) SemError(29);
		boolean spaces = false;
		int start = a[0];
		for (int i = 1; i <= len-2; i++) {
			if (a[i] <= ' ') spaces = true;
			if (a[i] == '\\') {
				if (a[i+1] == '\\' || a[i+1] == '\'' || a[i+1] == '\"') {
					for (int j = i; j < len - 1; j++) a[j] = a[j+1]; len--;
				}
			}
		}
		a[0] = '"'; a[len-1] = '"';
		if (spaces) SemError(24);
		return new String(a, 0, len);
	}

/*-------------------------------------------------------------------------*/

CHARACTERS
  letter   = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_" .
  digit    = "0123456789" .
  cntl     = CHR(0) .. CHR(31) .
  tab      = CHR(9) .
  lf       = CHR(10) .
  cr       = CHR(13) .
  back     = CHR(92) .
  noQuote1 = ANY - '"' - cntl - back .
  noQuote2 = ANY - "'" - cntl - back .
  graphic  = ANY - cntl .

IGNORE cr + lf + tab

TOKENS
  ident     = letter { letter | digit } .
  string    =   '"' { noQuote1 | back graphic } '"'
              | "'" { noQuote2 | back graphic } "'" .
  badString =   '"' { noQuote1 | back graphic } ( cr | lf )
              | "'" { noQuote2 | back graphic } ( cr | lf ) .
  number    = digit {digit} .

PRAGMAS
  ddtSym = "$" {letter | digit} . (. Tab.SetDDT(t.val); .)

COMMENTS FROM "/*" TO "*/" NESTED

/*---------------------------------------------------------------------------*/

PRODUCTIONS

Coco                              (. int eofSy;
                                     boolean undef, noAttrs, noRet, ok, ok1;
                                     String gramName;
                                     Symbol sym;
                                     Graph g; .)
=
  [ PackageName ]
  [ ImportList ]
  "COMPILER"                      (. eofSy = Tab.NewSym(Tab.t, "EOF", 0);
                                     Tab.ignored = new BitSet(); .)
  ident                           (. gramName = token.val;
                                     Tab.semDeclPos = new Position();
                                     Tab.semDeclPos.beg = t.pos; .)
  { ANY }                         (. Tab.semDeclPos.len = t.pos - Tab.semDeclPos.beg;
                                     Tab.semDeclPos.col = 0; .)
  { Declaration }
  SYNC
  "PRODUCTIONS"                   (. Tab.ignored.set(32); /*' ' is always ignored*/
                                     if (genScanner) DFA.MakeDeterministic();
                                     Tab.nNodes = 0; .)
  { ident                         (. int sp = Tab.FindSym(token.val);
                                     undef = sp == Tab.noSym;
                                     if (undef) {
                                       sp = Tab.NewSym(Tab.nt, token.val, token.line);
                                       sym = Tab.Sym(sp);
                                     } else {
                                       sym = Tab.Sym(sp);
                                       if (sym.typ == Tab.nt) {
                                         if (sym.struct > 0) SemError(7);
                                       } else SemError(8);
                                       sym.line = token.line;
                                     }
                                     noAttrs = sym.attrPos == null; sym.attrPos = null;
                                     noRet = sym.retVar == null; sym.retVar = null; .)
    [   AttrDecl <sym>
      | AttrDecl1 <sym>
    ]                             (. if (!undef)
                                         if (noAttrs && sym.attrPos != null
                                         || noRet && sym.retVar != null
                                         || !noAttrs && sym.attrPos == null
                                         || !noRet && sym.retVar == null) SemError(5); .)
    [ SemText <^sym.semPos> ]
    WEAK "="
    Expression <^g>               (. sym.struct = g.l;
                                     Tab.CompleteGraph(g.r); .)
    WEAK "."
  }
  "END" ident                     (. if (Tab.ddt[2]) Tab.PrintGraph();
                                     Tab.gramSy = Tab.FindSym(gramName);
                                     if (Tab.gramSy == Tab.noSym) SemError(11);
                                     else {
                                       sym = Tab.Sym(Tab.gramSy);
                                       if (sym.attrPos != null) SemError(12);
                                     }
                                     if (!gramName.equals(token.val)) SemError(17);
                                     if (Scanner.err.count == 0) {
                                       System.out.println("Checking");
                                       Tab.CompSymbolSets();
                                       ok = Tab.NtsComplete()
                                            && Tab.AllNtReached()
                                            && Tab.NoCircularProductions()
                                            && Tab.AllNtToTerm();
                                       if (ok) ok1 = Tab.LL1();
                                       if (Tab.ddt[7]) Tab.XRef();
                                       if (ok) {
                                         if (!Tab.ddt[5]) {
                                           ParserGen.WriteParser(genNames || Tab.ddt[10]);
                                           System.out.print("Parser"); System.out.flush();
                                           if (genScanner) {
                                             System.out.print(" + Scanner"); System.out.flush();
                                             DFA.WriteScanner(ignoreCase);
                                             if (Tab.ddt[0]) DFA.PrintStates();
                                           }
                                           if (Tab.ddt[11]) {
                                             DriverGen.WriteDriver();
                                             System.out.print(" + Driver");
                                           }
                                           System.out.println(" generated");
                                         }
                                       if (Tab.ddt[8]) ParserGen.WriteStatistics();
                                       }
                                     }
                                     if (Tab.ddt[6]) Tab.PrintSymbolTable();
                                     System.out.println(); .)
  "." .

/*--------------------------------------------------------------------------------------*/
PackageName
= "PACKAGE" string  (. Tab.setPackageName(token.val); .)
    .
/*--------------------------------------------------------------------------------------*/
ImportList
= "IMPORT"
    string          (. Tab.addImport(token.val); .)
    {","
    string          (. Tab.addImport(token.val); .)
    }
    .
/*--------------------------------------------------------------------------------------*/

Declaration                       (. Graph g1, g2; boolean nested = false; .)
= (
      "CHARACTERS" { SetDecl }
    | "TOKENS"     { TokenDecl <Tab.t> }
    | "NAMES"      { NameDecl }   (. genNames = true; .)
    | "PRAGMAS"    { TokenDecl <Tab.pr> }
    | "COMMENTS"
      "FROM" TokenExpr <^g1>
      "TO" TokenExpr <^g2>
      [ "NESTED"                  (. nested = true; .)
      ]                           (. new Comment(g1.l, g2.l, nested); .)
    | "IGNORE"
      ( "CASE"                    (. if (startedDFA) SemError(30); ignoreCase = true; .)
        | Set <^Tab.ignored>      (. if (Tab.ignored.get(0)) SemError(9); .)
      )
  )                               (. startedDFA = true; .)
  .

/*--------------------------------------------------------------------------------------*/

SetDecl                           (. BitSet s; .)
=
  ident                           (. String name = token.val;
                                     int c = Tab.ClassWithName(name);
                                     if (c >= 0) SemError(7); .)
  "=" Set <^s>                    (. if (Sets.Size(s) == 0) SemError(1);
                                     c = Tab.NewClass(name, s); .)
  "." .

/*--------------------------------------------------------------------------------------*/

Set <^BitSet s>                   (. BitSet s2; .)
=
  SimSet <^s>
  {   "+" SimSet <^s2>            (. s.or(s2); .)
    | "-" SimSet <^s2>            (. Sets.Differ(s, s2); .)
  } .

/*--------------------------------------------------------------------------------------*/

SimSet <^BitSet s>                (. String name; int c, n1, n2; .)
=                                 (. s = new BitSet(128); .)
  (   ident                       (. c = Tab.ClassWithName(token.val);
                                     if (c < 0) SemError(15); else s.or(Tab.Class(c)); .)
    | string                      (. name = token.val;
                                     for (int i = 1; name.charAt(i) != name.charAt(0); i++)
                                       if (ignoreCase) s.set((int) Character.toUpperCase(name.charAt(i)));
                                       else s.set((int) name.charAt(i)); .)
    | SingleChar<^n1>             (. s.set(n1); .)
      [ ".." SingleChar<^n2>      (. for (int i = n1; i <= n2; i++) s.set(i); .)
      ]
    | "ANY"                       (. s = Sets.FullSet(127); .)
  )
  .

/*--------------------------------------------------------------------------------------*/

SingleChar <^int n>               (. String name; .)
=                                 (. n = 0; .)
  "CHR" "("
    (   number                    (. n = Integer.parseInt(token.val, 10);
                                     if (n > 127) SemError(2); n %= 128;
                                     if (ignoreCase && n >= 'a' && n <= 'z') n -= 32;  .)
      | string                    (. name = token.val;
                                     if (name.length() != 3) SemError(2);
                                     if (ignoreCase) name = name.toUpperCase();
                                     n = name.charAt(1); .)
    )
  ")" .

/*--------------------------------------------------------------------------------------*/

TokenDecl <int typ>               (. SymInfo s; int sp; Position pos; Graph g; .)
=
  Sym <^s>                        (. if (Tab.FindSym(s.name) != Tab.noSym) {SemError(7); sp = 0;}
                                     else {
                                         sp = Tab.NewSym(typ, s.name, token.line);
                                         Tab.Sym(sp).struct = Tab.classToken;
                                     } .)
  SYNC
  (   "=" TokenExpr <^g>          (. if (s.kind != ident) SemError(13);
                                     Tab.CompleteGraph(g.r);
                                     DFA.ConvertToStates(g.l, sp); .)
      "."
    |                             (. if (s.kind == ident) genScanner = false;
                                     else MatchLiteral(sp); .)
  )
  [ SemText <^pos>                (. if (typ == Tab.t) SemError(14);
                                     Tab.Sym(sp).semPos = pos; .)
  ] .

/*--------------------------------------------------------------------------------------*/

AttrDecl <Symbol sym>             (. int beg, col, dim; StringBuffer buf; .)
=
  "<"
  [ "^"
    ident                         (. buf = new StringBuffer(token.val); dim = 0; .)
    { "[" "]"                     (. dim++; .)
    }
    ident                         (. sym.retVar = token.val; .)
    { "[" "]"                     (. dim++; .)
    }                             (. while (dim > 0) { buf.append("[]"); dim--; }
                                     sym.retType = buf.toString(); .)
    [","]
  ]                               (. beg = t.pos; col = t.col; .)
  { ANY | badString               (. SemError(18); .)
  }
  ">"                             (. if (token.pos > beg) {
                                         sym.attrPos = new Position();
                                         sym.attrPos.beg = beg; sym.attrPos.col = col;
                                         sym.attrPos.len = token.pos - beg;
                                     } .).

/*--------------------------------------------------------------------------------------*/

AttrDecl1 <Symbol sym>            (. int beg, col, dim; StringBuffer buf; .)
=
  "<."
  [ "^"
    ident                         (. buf = new StringBuffer(token.val); dim = 0; .)
    { "[" "]"                     (. dim++; .)
    }
    ident                         (. sym.retVar = token.val; .)
    { "[" "]"                     (. dim++; .)
    }                             (. while (dim > 0) { buf.append("[]"); dim--; }
                                     sym.retType = buf.toString(); .)
    [","]
  ]                               (. beg = t.pos; col = t.col; .)
  { ANY | badString               (. SemError(18); .)
  }
  ".>"                            (. if (token.pos > beg) {
                                         sym.attrPos = new Position();
                                         sym.attrPos.beg = beg; sym.attrPos.col = col;
                                         sym.attrPos.len = token.pos - beg;
                                     } .).

/*--------------------------------------------------------------------------------------*/

Expression <^Graph g>             (. Graph g2; .)
=
  Term <^g>                       (. boolean first = true; .)
  { WEAK "|"
    Term <^g2>                    (. if (first) {g = Tab.FirstAlt(g); first = false;}
                                     g = Tab.Alternative(g, g2); .)
  } .

/*--------------------------------------------------------------------------------------*/

Term<^Graph g>                    (. Graph g2; .)
=                                 (. g = new Graph(); .)
  (   Factor <^g>
      { Factor <^g2>              (. g = Tab.Sequence(g, g2); .)
      }
   |                              (. g = new Graph();
                                     g.l = Tab.NewNode(Tab.eps, 0, 0);
                                     g.r = g.l; .)
  ) .

/*--------------------------------------------------------------------------------------*/

Factor <^Graph g>                 (. GraphNode n;
                                     SymInfo s;
                                     Symbol sym;
                                     Position pos;
                                     BitSet set;
                                     int sp;
                                     boolean undef, weak = false; .)
=                                 (. g = new Graph(); .)
  ( [ "WEAK"                      (. weak = true; .)
    ]
    Sym <^s>                      (. sp = Tab.FindSym(s.name); undef = sp == Tab.noSym;
                                     if (undef) {
                                       if (s.kind == ident)
                                         sp = Tab.NewSym(Tab.nt, s.name, 0); // forward nt
                                       else if (genScanner) {
                                         sp = Tab.NewSym(Tab.t, s.name, token.line);
                                         MatchLiteral(sp);
                                       } else { // undefined string in production
                                         SemError(6); sp = 0;
                                       }
                                     }
                                     sym = Tab.Sym(sp);
                                     int typ = sym.typ;
                                     if (typ != Tab.t && typ != Tab.nt) SemError(4);
                                     if (weak)
                                         if (sym.typ == Tab.t) typ = Tab.wt; else SemError(23);
                                     g.l = Tab.NewNode(typ, sp, token.line); g.r = g.l;
                                     n = Tab.Node(g.l); .)
    [ (   Attribs <n>
        | Attribs1 <n> )          (. if (typ != Tab.nt) SemError(3); .)
    ]                             (. if (undef) {
                                       sym.attrPos = n.pos; sym.retVar = n.retVar; // dummies
                                     } else
                                       if (n.pos != null && sym.attrPos == null
                                         || n.retVar != null && sym.retVar == null
                                         || n.pos == null && sym.attrPos != null
                                         || n.retVar == null && sym.retVar != null) SemError(5); .)
  | "(" Expression <^g> ")"
  | "[" Expression <^g> "]"       (. g = Tab.Option(g); .)
  | "{" Expression <^g> "}"       (. g = Tab.Iteration(g); .)
  | SemText <^pos>                (. g.l = Tab.NewNode(Tab.sem, 0, 0);
                                     g.r = g.l;
                                     n = Tab.Node(g.l); n.pos = pos; .)
  | "ANY"                         (. set = Sets.FullSet(Tab.maxTerminals);
                                     set.clear(Tab.eofSy);
                                     g.l = Tab.NewNode(Tab.any, Tab.NewSet(set), 0);
                                     g.r = g.l; .)
  | "SYNC"                        (. g.l = Tab.NewNode(Tab.sync, 0, 0);
                                     g.r = g.l; .)
  ) .

/*--------------------------------------------------------------------------------------*/

TokenExpr <^Graph g>              (. Graph g2; .)
=
  TokenTerm <^g>                  (. boolean first = true; .)
  { WEAK "|"
    TokenTerm <^g2>               (. if (first) {g = Tab.FirstAlt(g); first = false;}
                                     g = Tab.Alternative(g, g2); .)
  } .

/*--------------------------------------------------------------------------------------*/

TokenTerm <^Graph g>              (. Graph g2; .)
=
  TokenFactor <^g>
  { TokenFactor <^g2>             (. g = Tab.Sequence(g, g2); .)
  }
  [ "CONTEXT"
    "(" TokenExpr <^g2>           (. SetCtx(g2.l); g = Tab.Sequence(g, g2); .)
    ")"
  ] .

/*--------------------------------------------------------------------------------------*/

TokenFactor <^Graph g>            (. String name; int kind; SymInfo s; .)
=                                 (. g = new Graph(); .)
  (   Sym <^s>                    (. if (s.kind == ident) {
                                       int c = Tab.ClassWithName(s.name);
                                       if (c < 0) {
                                         SemError(15);
                                         c = Tab.NewClass(s.name, new BitSet());
                                       }
                                       g.l = Tab.NewNode(Tab.clas, c, 0);
                                       g.r = g.l;
                                     } else g = Tab.StrToGraph(s.name); // str .)
    | "(" TokenExpr <^g> ")"
    | "[" TokenExpr <^g> "]"      (. g = Tab.Option(g); .)
    | "{" TokenExpr <^g> "}"      (. g = Tab.Iteration(g); .)
  ) .

/*--------------------------------------------------------------------------------------*/

Sym <^SymInfo s>
=                                 (. s = new SymInfo(); .)
  (   ident                       (. s.kind = ident; .)
    | string                      (. s.kind = string; .)
  )                               (. s.name = token.val;
                                     if (s.kind == string) s.name = FixString(s.name); .)
  .

/*--------------------------------------------------------------------------------------*/

Attribs <GraphNode n>             (. int beg, col; .)
=
  "<"
  (   "^"                         (. beg = t.pos; .)
      { ANY | badString           (. SemError(18); .)
      }                           (. n.retVar = ParserGen.GetString(beg, t.pos); .)
      (   "," AttrRest<n>
        | ">"
      )
    | AttrRest<n>
  ) .

/*--------------------------------------------------------------------------------------*/

AttrRest <GraphNode n>            (. int beg, col; .)
=                                 (. beg = t.pos; col = t.col; .)
  { ANY | badString               (. SemError(18); .)
  }
  ">"                             (. if (token.pos > beg) {
                                       n.pos = new Position();
                                       n.pos.beg = beg; n.pos.col = col;
                                       n.pos.len = token.pos - beg;
                                     } .)
  .

/*--------------------------------------------------------------------------------------*/

Attribs1 <GraphNode n>            (. int beg, col; .)
=
  "<."
  (   "^"                         (. beg = t.pos; .)
      { ANY | badString           (. SemError(18); .)
      }                           (. n.retVar = ParserGen.GetString(beg, t.pos); .)
      (   "," AttrRest1<n>
        | ".>"
      )
    | AttrRest1<n>
  ) .

/*--------------------------------------------------------------------------------------*/

AttrRest1 <GraphNode n>           (. int beg, col; .)
=                                 (. beg = t.pos; col = t.col; .)
  { ANY | badString               (. SemError(18); .)
  }
  ".>"                            (. if (token.pos > beg) {
                                         n.pos = new Position();
                                         n.pos.beg = beg; n.pos.col = col;
                                         n.pos.len = token.pos - beg;
                                     } .)
  .

/*--------------------------------------------------------------------------------------*/

SemText <^Position pos>
=
  "(."                            (. pos = new Position();
                                     pos.beg = t.pos; pos.col = t.col; .)
  {   ANY
    | badString                   (. SemError(18); .)
    | "(."                        (. SemError(19); .)
  }
  ".)"                            (. pos.len = token.pos - pos.beg; .)
  .

/*--------------------------------------------------------------------------------------*/

NameDecl                          (. String alias; .)
=
  ident                           (. alias = token.val; .)
  "="
  (   ident                       (. Tab.NewName(alias, token.val); .)
    | string                      (. Tab.NewName(alias, FixString(token.val)); .)
  )
  "." .

END Coco.
