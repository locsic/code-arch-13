/* Generic driver frame file for Coco/R for Java
   PDT  10 August 2002   (p.terry@ru.ac.za)
   Modify this to suit your own purposes - hints are given below! */

package -->package;

//  ----------------------- you may need to change the "import" clauses:

import java.io.*;

class SemErrors extends ErrorStream {

	void SemErr(int n, int line, int col) {
		String s;
		count++;
		switch (n) {
			// for example: case 0: s = "invalid character"; break;

			//  ----------------------- add other semantic error messages as appropriate:

			default: s = "Semantic error " + n; break;
		}
		StoreError(n, line, col, s);
	}
}

public class Comp {

	static ErrorStream ErrorHandler;
	public static void main (String[] args) {

	// ----------------------- you may need to process command line parameters:

		String inputName = args[0];
		if (args.length == 0 || inputName == "") {
			System.out.println("No input file specified");
		} else {

			ErrorHandler = new SemErrors(); // Errors reported to StdOut

			// Alternatively if you wish to merge errors, use the following
			// ErrorHandler = new MergeErrors(); // Merge error messages in listing

			// Error merging or other monitoring can use Trace
			// Trace.Init();

			//  ----------------------- add other initialization if required:

			Scanner.Init(inputName, ErrorHandler);
			Parser.Parse();

			// Error merging or other monitoring needs to close Trace
			// Trace.out.flush();

			//  ----------------------- add other finalization if required:
		}
	}
}

//  ----------------------- the code below can be excised if you do not wish
//  ----------------------- to merge error messages in "listing.txt"

class ErrorRec {
	int line, col, num;
	String str;
	ErrorRec next;

	ErrorRec(int n, int l, int c, String s) {
		num = n; line = l; col = c; str = s; next = null;
	}

	void Display() {
		Trace.println("-- line " + line + " col " + col + ": " + str);
	}
}

class MergeErrors extends SemErrors {

	ErrorRec first, last;
	boolean eof = false;

	MergeErrors() {
		first = null;
	}

	void StoreError(int n, int line, int col, String s) {
		ErrorRec latest = new ErrorRec(n, line, col, s);
		if (first == null) first = latest; else last.next = latest;
		last = latest;
	}

	private String GetLine() {
		char ch, CR = '\r', LF = '\n';
		int l = 0;
		StringBuffer s = new StringBuffer();
		ch = (char) Buffer.read();
		while (ch != Buffer.eof && ch != CR && ch != LF) {
			s.append(ch); l++; ch = (char) Buffer.read();
		}
		eof = (l == 0 && ch == Buffer.eof);
		if (ch == CR) {  // check for MS-DOS
			ch = (char) Buffer.read();
			if (ch != LF && ch != Buffer.eof) Buffer.pos--;
		}
		return s.toString();
	}

	static private String Int(int n, int len) {
		String s = String.valueOf(n);
		int i = s.length(); if (len < i) len = i;
		int j = 0, d = len - s.length();
		char[] a = new char[len];
		for (i = 0; i < d; i++) a[i] = ' ';
		for (j = 0; i < len; i++) {a[i] = s.charAt(j); j++;}
		return new String(a, 0, len);
	}

	private void Display(String s, ErrorRec e) {
		Trace.print("**** ");
		for (int c = 1; c < e.col; c++)
			if (s.charAt(c-1) == '\t') Trace.print("\t"); else Trace.print(" ");
		Trace.println("^ " + e.str);
	}

	void Summarize(String dir) {
		if (count == 0) {super.Summarize(dir); return;}
		System.out.println("Errors detected - see listing.txt");
		String s;
		ErrorRec cur = first;
		Buffer.Set(0);
		int lnr = 1; s = GetLine();
		while (!eof) {
			Trace.println(Int(lnr, 4) + " " + s);
			while (cur != null && cur.line == lnr) {
				Display(s, cur); cur = cur.next;
			}
			lnr++; s = GetLine();
		}
		if (cur == null) return;
		Trace.println(Int(lnr, 4));
		while (cur != null) {
			Display(s, cur); cur = cur.next;
		}
	}
}

//  ----------------------- Trace is a useful stream for error reporting:

class Trace {
// Portability - Use the following for Java 1.0
//	static PrintStream out;
// Portability - Use the following for Java 1.1
//	static PrintWriter out;

	static PrintWriter out;

	static void Init() {
		try {

// Portability - Use the following for Java 1.0
//			out = new PrintStream(new BufferedOutputStream(new FileOutputStream("listing.txt")));
// Portability - Use the following for Java 1.1
//			out = new PrintWriter(new BufferedWriter(new FileWriter("listing.txt")));

			out = new PrintWriter(new BufferedWriter(new FileWriter("listing.txt")));

		}
		catch (IOException e) {
			Scanner.err.Exception("-- could not open listing.txt");
		}
	}

	static void print(String s) {
		out.print(s);
	}

	static void println(String s) {
		out.println(s);
	}

	static void println() {
		out.println();
	}
}

//  -----------------------  end of excisable code section

$$$
