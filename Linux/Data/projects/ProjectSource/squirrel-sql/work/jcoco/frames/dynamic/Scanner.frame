import java.io.*;
import java.util.*;

class Token {
	int kind;    // token kind
	int pos;     // token position in the source text (starting at 0)
	int col;     // token column (starting at 0)
	int line;    // token line (starting at 1)
	String str;  // exact string value
	String val;  // token string value (uppercase if ignoreCase)
}

public class Scanner
{
    public abstract static class Buffer
    {
        public static final char eof = 65535;

        int _bufLen;
        int _pos;

        protected void setIndex(int position) {
            if (position < 0) position = 0; else if (position >= _bufLen) position = _bufLen;
            _pos = position;
        }
        protected abstract char read();
    }

    static class FBuffer extends Buffer
    {
        static char[] buf;

        FBuffer(File file) throws IOException
        {
            _bufLen = (int) file.length();

            FileReader fr = new FileReader(file);
            buf = new char[_bufLen];

            fr.read(buf);
            _pos = 0;
        }
        protected char read() {
            if (_pos < _bufLen) return buf[_pos++];
            else return eof;
        }
    }

    static class SBuffer extends Buffer
    {
        String chars;

        SBuffer(String string)
        {
            _bufLen = string.length();
            chars = string;
            _pos = 0;
        }
        protected char read() {
            if (_pos < _bufLen)
                return chars.charAt(_pos++);
            else return eof;
        }
    }

	private static final char EOF = '\0';
	private static final char CR  = '\r';
	private static final char LF  = '\n';
-->declarations

    // set of characters to be ignored by the scanner
    private static BitSet ignore = new BitSet(128);
	static {
-->initialization
    }

	ErrorStream err;  // error messages

    private Buffer buf;        // data, random accessible
	protected Token t;           // current token
	protected char strCh;        // current input character (original)
	protected char ch;           // current input character (for token)
	protected char lastCh;       // last input character
	protected int pos;           // position of current character
	protected int line;          // line number of current character
	protected int lineStart;     // start position of current line

	public Scanner (File file, ErrorStream e) throws IOException
	{
		buf = new FBuffer(file);
        init(e, file.getName());
	}

	public Scanner (String parseString, ErrorStream e)
	{
		buf = new SBuffer(parseString);
        init(e, "");
	}

	public Scanner (Buffer buff, ErrorStream e)
	{
		this.buf = buff;
        init(e, "");
	}

	private void init(ErrorStream e, String eName) {
		err = e;
		err.fileName = eName;

		pos = -1; line = 1; lineStart = 0; lastCh = 0;
		NextCh();
	}

	void setPos(int position) {
	    buf.setIndex(position);
	}

	private void NextCh() {
		lastCh = ch;
		strCh = buf.read(); pos++;
-->scan0
		if (ch == '\uffff') ch = EOF;
		else if (ch == CR) {line++; lineStart = pos + 1;}
		else if (ch == LF) {
			if (lastCh != CR) line++;
			lineStart = pos + 1;
		} else if (ch > '\u007f') {
			err.StoreError(0, line, pos - lineStart + 1, "invalid character in source file");
			err.count++; ch = ' ';
		}
	}

-->comment

	private void CheckLiteral(StringBuffer buf) {
-->literals
	}

	Token Scan() {
		while (ignore.get((int)ch)) NextCh();
-->scan1
		t = new Token();
		t.pos = pos; t.col = pos - lineStart + 1; t.line = line;
		StringBuffer buf = new StringBuffer();
		int state = start[ch];
		int apx = 0;
		loop: for (;;) {
			buf.append(strCh);
			NextCh();
			switch (state) {
				case 0:
					{t.kind = noSym; break loop;} // NextCh already done
-->scan2
			}
		}
		t.str = buf.toString();
-->scan3
		return t;
	}
}
$$$
