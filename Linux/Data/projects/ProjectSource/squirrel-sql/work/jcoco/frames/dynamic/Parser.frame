import java.util.*;

public class Parser {
-->constants
	private static final boolean T = true;
	private static final boolean x = false;
	private static final int minErrDist = 2;

	private int errDist = minErrDist;

    protected Scanner scanner;  // input scanner
	protected Token token;      // last recognized token
	protected Token t;          // lookahead token

-->declarations

	void Error(int n) {
		if (errDist >= minErrDist) scanner.err.ParsErr(n, t.line, t.col);
		errDist = 0;
	}

	void SemError(int n) {
		if (errDist >= minErrDist) scanner.err.SemErr(n, token.line, token.col);
		errDist = 0;
	}

	boolean Successful() {
		return scanner.err.count == 0;
	}

	String LexString() {
		return token.str;
	}

	String LexName() {
		return token.val;
	}

	String LookAheadString() {
		return t.str;
	}

	String LookAheadName() {
		return t.val;
	}

	private void Get() {
		for (;;) {
			token = t;
			t = scanner.Scan();
			if (t.kind <= maxT) {errDist++; return;}
-->pragmas
			t = token;
		}
	}

	private void Expect(int n) {
		if (t.kind == n) Get(); else Error(n);
	}

	private boolean StartOf(int s) {
		return set[s][t.kind];
	}

	private void ExpectWeak(int n, int follow) {
		if (t.kind == n) Get();
		else {
			Error(n);
			while (!StartOf(follow)) Get();
		}
	}

	private boolean WeakSeparator(int n, int syFol, int repFol) {
		boolean[] s = new boolean[maxT+1];
		if (t.kind == n) {Get(); return true;}
		else if (StartOf(repFol)) return false;
		else {
			for (int i = 0; i <= maxT; i++) {
				s[i] = set[syFol][i] || set[repFol][i] || set[0][i];
			}
			Error(n);
			while (!s[t.kind]) Get();
			return StartOf(syFol);
		}
	}

-->productions

	public Parser(Scanner _scanner)
	{
	    scanner = _scanner;
		t = new Token();
    }

    public void parse()
    {
		Get();
-->parseRoot
	}

	private static boolean[][] set = {
-->initialization
	};
}
-->ErrorStream
public class ErrorStream {

	int count;  // number of errors detected
	public String fileName;

	public ErrorStream() {
		count = 0;
	}

	protected void StoreError(int n, int line, int col, String s) {
		System.out.println(fileName + " (" + line + ", " + col + ") " + s);
	}

	protected void ParsErr(int n, int line, int col) {
		String s;
		count++;
		switch (n) {
-->errors
			default: s = "Syntax error " + n;
		}
		StoreError(n, line, col, s);
	}

	protected void SemErr(int n, int line, int col) {
		String s;
		count++;
		switch (n) {
			// for example: case 0: s = "invalid character"; break;
			// perhaps insert application specific error messages here
			default: s = "Semantic error " + n; break;
		}
		StoreError(n, line, col, s);
	}

	protected void Exception (String s) {
        throw new RuntimeException(s);
	}

	protected void Summarize () {
		switch (count) {
			case 0 : System.out.println("No errors detected"); break;
			case 1 : System.out.println("1 error detected"); break;
			default: System.out.println(count + " errors detected"); break;
		}
	}

}
$$$
