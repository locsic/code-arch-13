Coco/R for Java 1.14
====================

Pat Terry
Rhodes University
GRAHAMSTOWN 6140
South Africa

Last amended Sunday 11 August 2002

This distribution contains

 - the sources and compiled classes for Coco/R for Java, as extended and
   modified by Pat Terry (p.terry@ru.ac.za) from the originals developed by
   Hanspeter Moessenboeck (Moessenboeck@ssw.uni-linz.ac.at)

 - the sources and compiled classes for the Taste example compiler, as used as
   an illustration in other distributions of Coco/R, again based on those
   developed by Hanspeter Moessenboeck.

 - standard frame files and a sample minimal driver class for use with Coco/R
   for Java.

 - documentation as an HTML file for reading with a standard browser.  There
   is no embedded Java; the documentation should be readable with simple
   browsers!

The distribution must be unpacked with a utility that preserves long file
names and subdirectory structures.  Such utilities are freely available on the
Internet from various sites.

The files distributed here have been tested using JDK 1.3 compilers.  They
seem to be compatible with JDK 1.2.  Alterations needed to build the system
for a 1.0 compiler are clearly marked in the files; the distribution has been
tested with the JDK 1.0.2 compiler under Linux, and with kaffe and jikes.

Documentation
=============

Documentation explaining the use of Coco/R for Java may be found at

     http://cs.ru.ac.za/homes/cspt/javacoco.htm  (this version)

(this file also appears in the html directory in this distribution kit)

and at

     http://www.ssw.uni-linz.ac.at/Projects/Coco/Coco.html (original version)

and information on other versions of Coco/R for Pascal, C and Modula-2 can be
found at

     http://cs.ru.ac.za/homes/cspt/cocor.htm

It is important to realize that Coco/R is intended for use with grammars that
meet the LL(1) conditions. Many grammars require some massaging before these
conditions are met. The use of Extended BNF (EBNF) instead of simple BNF makes
it easy to avoid most LL(1) conflicts.

Getting Going (DOS - other versions are similar)
================================================

You will need to proceed something like this:

(a) Create a work directory and unpack the distribution kit
         mkdir \work
         cd \work
         unzip jcoco113win.zip
(b) Set up a compilation batch file on the lines of the following (coco.bat)
         @echo off
         if "%2" == "" goto simple
         java Coco.Comp %1 >%2
         goto stop
         :simple
         java Coco.Comp %1
         :stop
(c) Copy the frame files to the \work directory
         copy \work\frames \work
(d) Create your ATG file in the \work directory, for example
         edit GrammarName.atg
    (The Goal symbol should match "GrammarName" here.)
(e) Run Coco
         coco GrammarName.atg
(f) This should create the Scanner, Parser, ErrorStream files in the \work
    directory.
(g) Edit Comp.java and change the line
         package GrammarName;
    to suit your application
(h) Create a grammar directory
         mkdir GrammarName
(i) Copy the four *.java files to this directory
         copy *.java GrammarName
    Copy or create any other .java support files in this directory too.
(j) Compile your application
         javac -d . -deprecation GrammarName\*.java
(k) Run your application
         java GrammarName.Comp

Disclaimer
==========

Responsibility for errors introduced while the system was extended to give the
version in this distribution belongs to Pat Terry, who will be grateful to
have such errors brought to his attention.  However, while every attempt has
been made to ensure that Coco/R performs satisfactorily, the developers can
accept no liability for any damage or loss, including special, incidental, or
consequential, caused by the use of the software, directly or indirectly.

All trademarks are dutifully acknowledged.

History
=======

1.04 (8 July 1998)

  - First release with Terry modifications

1.05 (31 July 1998)

  - Subtle bug in DFA class fixed by Moessenboeck

1.06 (24 August 1998)

  - literal tokens can no longer be empty

1.07 (10 October 1998)

  - Moessenboeck added the ability for functions to return array types
    (Suggestion from John Gough, Australia)

1.08 (5 November 1998)

  - Eliminated allowing incomplete strings within attributes and actions

1.09 (9 July 1999)

  - Attributes allowed between < ... > or <. ... .> brackets, to allow for
    Boolean comparisons to form part of an actual parameter.
  - (. may no longer appear within semantic action text, as this is probably a
    symptom of unmatched (. ... .) bracketing.

1.10 (11 March 2000)

  - Allowed CHR("character") as an alternative to CHR(number) in CHARACTERS
    section.
  - Allowed \" and \' to appear in strings enclosed in "quotes' and 'quotes'
    as in C.  (This is a bit messy!)
  - Revised scanner generation allows for odd terminals like END and END;
    to be distinguished properly.
  - Better treatment of comment parsing routines
  - Insistence that IGNORE CASE appear first if it appears at all in scanner
    specification.
  - Better generation of names and error messages.

1.11 (10 July 2001)

  - Minor bug fixed in scanner that caused trouble with tokens of the silly
    form

       ttt = hhh [ { hhh } ] .

  - Definition of string changed as below

     CHARACTERS
       cntl     = CHR(0)..CHR(31).
       back     = CHR(92) .
       noQuote1 = ANY - '"' - cntl - back .
       noQuote2 = ANY - "'" - cntl - back .
       graphic  = ANY - cntl .
     TOKENS
       string    =   '"' {noQuote1 | back graphic } '"'
                   | "'" {noQuote2 | back graphic } "'" .

    (This may break some existing source.  The effect is that \" \' and \\ in
    strings are all treated as in C.  Previously this was not so consistent.

  - Minor bug fix in DFA.java that caused problems with constructions like
       COMMENTS FROM "#" TO "#"
    (where comment delimiters are single characters)

1.12 (1 December 2001)

  - Minor fix to Coco.ATG to routine FixString to generate symbol names
    correctly for literal tokens.

1.13 (10 July 2002)

  - Tweaked Tab.java to handle array bound problems.  Modified error message
    numbering and main driver routine to bring them closer in line with
    Moessenboeck's version.  (The table sizes could and should be made larger
    for 32 bit compilers.  The relationship between sizes is kludgy; the table
    really needs to be overhauled completely).

1.14 (11 August 2002)

  - Various changes to sources to bring them closer to the corresponding ones
    for Coco/R for C#.

  - Added the ability to generate a driver class from a driver frame file
    using the new $C ( $5) directive or -C command line flag

  - Added literal versions of directives and command line options matching
    those used in other versions of Coco/R

       -A  trace automaton         -C  generate compiler driver
       -F  list first/follow sets  -G  print syntax graph
       -I  trace first sets        -N  generate symbol names
       -Q  quiet error reporting   -S  list symbol table
       -T  test grammar only       -X  list cross reference table

    This required a relocation of setDDT from Parser.java to Tab.java

  - Repaired minor bug in generation of switch statements in
    ParserGen.PutCaseLabels

  - The routines for writing the Scanner, Parser and Driver collapsed if
    the frame files were correct.  Now improved.

  - Extended system so that error messages are merged with source listing
    in "listing.txt" by default; the -Q command line flag or $Q pragma
    switches into the old "quiet mode" which is suitable for use with editors
    that can handle error messages in a standard format.


=end=
