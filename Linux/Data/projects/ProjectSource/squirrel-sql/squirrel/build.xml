<?xml version="1.0"?>
<!DOCTYPE project PUBLIC "-//ANT//DTD project//EN" "file:./etc/dtd/project.dtd" [
  <!ENTITY buildmagic-init    SYSTEM "file:./etc/buildmagic/init.xml">
  <!ENTITY buildmagic-common  SYSTEM "file:./etc/buildmagic/common.xml">
  <!ENTITY project            SYSTEM "file:./project.xml">
  <!ENTITY local              SYSTEM "file:./local.xml">
]>

<!--  $Id: build.xml,v 1.9 2001/11/21 06:42:10 placson Exp $               -->
<!-- ===================================================================== -->
<!--                                                                       -->
<!--  Build file (for use w/Ant & BuildMagic modifications)                -->
<!--                                                                       -->
<!-- ===================================================================== -->

<project name="project" default="main" basedir=".">

  <!-- =================================================================== -->
  <!-- Project Setup                                                       -->
  <!-- =================================================================== -->

  <!-- Include BuildMagic initialization elements -->
  &buildmagic-init;

  <!-- Include local and project configuration files -->
  &local;
  &project;

  <!-- Finish loading buildmagic support files -->
  &buildmagic-common;

  <!-- Initialize the build system -->
  <target name="init" depends="buildmagic_init" 
	  description="Initialize the build system">
    <!-- Setup timestamp properties -->
    <tstamp/>

    <!-- <require property="some.property"/> -->
  </target>

  <!-- The default target -->
  <target name="main" depends="most"
	  description="The default target">
  </target>

  <!-- Build most everything -->
  <target name="most" depends="classes"
	  description="Build 'most' of the system components">
  </target>
    
  <!-- Build everything -->
  <target name="all" depends="most, doc"
	  description="Build 'all' of the system components">
  </target>


  <!-- =================================================================== -->
  <!-- Prepares the build directory                                        -->
  <!-- =================================================================== -->

  <!-- Prepare for build output -->
  <target name="prepare" depends="init">
    <mkdir dir="${output.root}"/>
    <mkdir dir="${build.root}"/>

    <!-- Copy output to release -->
    <copy todir="${build.classes}" filtering="off">
      <fileset dir="${source.main}">
	<include name="**/*.properties"/>
	<include name="**/*.jpg"/>
	<include name="**/*.gif"/>
	<include name="**/*.xml"/>
      </fileset>
    </copy>
    
  </target>


  <!-- =================================================================== -->
  <!-- Compiles class files                                                -->
  <!-- =================================================================== -->

  <!-- Compile all class files -->
  <target name="classes" depends="prepare" description="Compile all class files">
    <mkdir dir="${build.classes}"/>

    <javac srcdir="${source.main}"
           destdir="${build.classes}"
           classpath="${javac.classpath}"
           includes="**/*.java"
	   excludes=""
           optimize="${javac.optimize}"
	   target="${javac.target}"
           debug="${javac.debug}"
	   depend="${javac.depend}"/>
  </target>


  <!-- =================================================================== -->
  <!-- Build Jars                                                          -->
  <!-- =================================================================== -->

  <!-- Build all jar files -->
  <target name="jar" depends="classes" description="Build all jar files">
    <mkdir dir="${build.lib}"/>

    <!-- build a jar containing all classes -->
    <jar jarfile="${project.name}-${project.version}.jar" basedir="${build.classes}">
      <include name="**" />
    </jar>
  </target>


  <!-- =================================================================== -->
  <!-- Build documents                                                     -->
  <!-- =================================================================== -->

  <!-- Create all generated documenation -->
  <target name="doc" depends="javadoc"
	  description="Creates all generated documentation">
    <mkdir dir="${build.doc}"/>
  </target>

  <target name="prepare-javadoc" depends="prepare">
    <!-- check if we need to build javadocs -->
    <uptodate property="javadoc.isuptodate"
	      targetfile="${build.doc.api}/index.html">
      <srcfiles dir="${source.main}" includes="**/*.java"/>
    </uptodate>

    <mkdir dir="${build.doc.api}"/>
  </target>	      

  <!-- Create the Java API documenation -->
  <target name="javadoc" depends="prepare-javadoc"
	  description="Creates the Java API documentation">
    <mkdir dir="${build.doc.api}"/>

    <javadoc packagenames="${javadoc.packages}"
             classpath="${javac.classpath}"
             sourcepath="${source.main}"
             destdir="${build.doc.api}"
             author="${javadoc.author}"
             version="${javadoc.version}"
             public="${javadoc.public}"
             package="${javadoc.package}"
             protected="${javadoc.protected}"
             private="${javadoc.private}"
             use="${javadoc.use}"
	     verbose="${javadoc.verbose}"
             windowtitle="${javadoc.windowtitle}"
	     splitindex="${javadoc.splitindex}"
             doctitle="${javadoc.doctitle}"/>
  </target>


  <!-- =================================================================== -->
  <!-- Build Scripts & Configuration Files                                 -->
  <!-- =================================================================== -->

  <target name="bin" depends="prepare" description="Generate script files">
     <mkdir dir="${build.bin}"/>

     <copy todir="${build.bin}" filtering="on">
       <fileset dir="${source.bin}"/>
     </copy>

     <!-- minor hack to make .sh & .py scripts executable -->
     <chmod dir="${build.bin}" perm="+rx" includes="**/*.sh **/*.py"/>
  </target>

  <target name="etc" depends="bin" description="Generate configuration files">
     <mkdir dir="${build.etc}"/>

     <copy todir="${build.etc}" filtering="on">
       <fileset dir="${source.etc}"/>
     </copy>
  </target>

  <target name="config" depends="bin, etc"
	  description="Generates all configuration related files"/>

  <!-- Builds the individual plugin jars -->
  <target name="plugins" depends="classes">
    <mkdir dir="${release.target.root}/plugins" />
    <mkdir dir="${release.target.root}/plugins/laf" />

    <jar jarfile="${release.target.root}/plugins/dbinfo.jar" basedir="${dbinfo.plugin}">
      <include name="**"/>
    </jar>

    <jar jarfile="${release.target.root}/plugins/laf.jar" basedir="${laf.plugin}">
      <include name="**"/>
    </jar>

    <!-- copy skins directory and files -->
    <copy todir="${release.target.root}/plugins/laf" filtering="off">
      <fileset dir="${source.resources}/plugins/laf/files">
        <exclude name="CVS/**" />
      </fileset>

      <fileset dir="${source.resources}/plugins/laf/lib">
        <include name="*.jar" />
      </fileset>
    </copy>

    <jar jarfile="${release.target.root}/plugins/savedqueries.jar" basedir="${savedqueries.plugin}">
      <include name="**"/>
    </jar>

    <jar jarfile="${release.target.root}/plugins/sqlscript.jar" basedir="${sqlscript.plugin}">
      <include name="**"/>
    </jar>

  </target>

  <!-- =================================================================== -->
  <!-- Build the distribution                                              -->
  <!-- =================================================================== -->

  <!-- Build a release distribution -->
  <target name="release" depends="jar, plugins"
	  description="Creates a 'release' of the current system">
    <mkdir dir="${release.target.root}"/>
    <mkdir dir="${release.target.root}/bin"/>
    <mkdir dir="${release.target.root}/doc"/>
    <mkdir dir="${release.target.root}/lib"/>
    <mkdir dir="${release.target.root}/plugins"/>

    <!-- Copy libraries out release lib -->
    <copy file="${nanoxml.jar}" todir="${release.target.root}/lib" />
    <copy file="${project.name}-${project.version}.jar" todir="${release.target.root}/lib" />

    <!-- Copy start scripts to release lib -->
    <copy todir="${release.target.root}/bin" filtering="off">
      <fileset dir="${source.bin}">
        <include name="squirrel-sql*" />
      </fileset>
    </copy>
    

    <!-- Copy static documents to release -->
    <copy todir="${release.target.doc}" filtering="off">
      <fileset dir="${project.doc}">
	<include name="**"/>
      </fileset>
    </copy>
  </target>

  <!-- Build a release distribution archive -->
  <target name="dist" depends="release, izpack"
	  description="Creates a 'release' distribution archive">
    <jar jarfile="${release.target.jarfile}" compress="true">
      <fileset dir="${release.root}" includes="${release.target}/**"/>
    </jar>
  </target>

  <!-- Create the distribution installaer -->
  <target name="izpack" depends="plugins">
    <java dir="${izpack.bin}" jar="${izpack.compiler}" 
          fork="yes">
      <arg value="${izpack.xml}" />

      <arg value="-b" />
      <arg value="${release.target.root}" />

      <arg value="-k" />
      <arg value="${izpack.kind}" />

      <arg value="-o" />
      <arg value="${basedir}/${project.name}-${project.version}-install.jar" />

    </java>
  </target>


  <!-- =================================================================== -->
  <!-- Cleans up generated stuff                                           -->
  <!-- =================================================================== -->

  <!-- Clean up all build output -->
  <target name="clean" depends="init">
    <delete dir="${build.root}"/>
  </target>

  <!-- Clean up all release output -->
  <target name="clean-release" depends="init">
    <delete dir="${release.root}"/>
  </target>

  <!-- Clean up all release and dist targets -->
  <target name="clean-dist" depends="clean, clean-release">
  </target>

  <!-- Clean up only the current release -->
  <target name="clean-release-target" depends="init">
    <delete dir="${release.target.root}"/>
    <delete file="${release.target.jarfile}"/>
  </target>

  <!-- Clean up all target products -->
  <target name="clean-all" depends="clean-dist, clean-release-target"
          description="CLEANS ALL TARGET OUTPUTS!">
    <delete file="${basedir}/${project.name}-${project.version}.jar" />
    <delete file="${basedir}/${project.name}-${project.version}-install.jar" />
    <echo>Completed cleaning all target products</echo>
  </target>
  


  <!-- =================================================================== -->
  <!-- Misc fluff                                                          -->
  <!-- =================================================================== -->

  <!-- start the application -->
  <target name="start" depends="classes">
    <java classname="net.sourceforge.squirrel_sql.client.Main" fork="yes">

      <classpath>
	<pathelement path="${build.classes}" />
	<pathelement path="${javac.classpath}" />
      </classpath>
    </java>
  </target>


</project>
